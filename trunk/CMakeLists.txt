project(FUSECOMPRESS)
cmake_minimum_required(VERSION 2.6)

option(WITH_GZ "enable deflate (zlib) compression" on)
option(WITH_BZ2 "enable bzip2 compression" on)
option(WITH_LZO "enable LZO compression" on)
option(WITH_LZMA "enable LZMA compression" on)

set (SOURCES_COMMON compress_null.c file.c globals.c)

set (SOURCES_FS background_compress.c compress.c direct_compress.c
     fusecompress.c log.c)

set (SOURCES_FSCK tools/fsck.c)
set (SOURCES_OFFLINE tools/offline.c)

include (CheckIncludeFile)
include (CheckLibraryExists)

set (CMAKE_C_FLAGS "-Wall -D_REENTRANT -D_FILE_OFFSET_BITS=64 -D_POSIX_SOURCE -D_POSIX_C_SOURCE=199309L -D_SVID_SOURCE -D_BSD_SOURCE -D_XOPEN_SOURCE=500 -g")

check_include_file("fuse.h" CMAKE_HAVE_FUSE_H)
if (CMAKE_HAVE_FUSE_H)
  check_library_exists(fuse fuse_main "" CMAKE_HAVE_FUSE)
  if (CMAKE_HAVE_FUSE)
    find_library(FUSE_LIBRARY NAMES fuse)
    set(LIBS ${LIBS} ${FUSE_LIBRARY})
  else (CMAKE_HAVE_FUSE)
    message(FATAL_ERROR "libfuse not found")
  endif (CMAKE_HAVE_FUSE)
else (CMAKE_HAVE_FUSE_H)
  message(FATAL_ERROR "fuse.h not found")
endif (CMAKE_HAVE_FUSE_H)

if(WITH_GZ)
  find_package(ZLIB)
  if (ZLIB_FOUND)
    include_directories(${ZLIB_INCLUDE_DIR})
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DHAVE_ZLIB")
    set(LIBS ${LIBS} ${ZLIB_LIBRARIES})
    set(MODULES "${MODULES} gz")
    set(SOURCES_COMMON ${SOURCES_COMMON} compress_gz.c)
  endif (ZLIB_FOUND)
endif(WITH_GZ)

if(WITH_BZ2)
  find_package(BZip2)
  if (BZIP2_FOUND)
    include_directories(${BZIP2_INCLUDE_DIR})
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DHAVE_BZIP2 ${BZIP2_DEFINITIONS}")
    set (LIBS ${LIBS} ${BZIP2_LIBRARIES})
    set (MODULES "${MODULES} bz2")
    set(SOURCES_COMMON ${SOURCES_COMMON} compress_bz2.c)
  endif (BZIP2_FOUND)
endif(WITH_BZ2)

if(WITH_LZMA)
  # lzma.h is broken and needs unistd.h and stdint.h included first
  # therefore we cannot use check_include_file here
  find_path(LZMA_INCLUDE_DIR lzma.h)
  if (LZMA_INCLUDE_DIR)
    message (STATUS "Looking for lzma.h - found")
    include_directories(${LZMA_INCLUDE_DIR})
    check_library_exists(lzma lzma_auto_decoder "" CMAKE_HAVE_LZMA)
    if (CMAKE_HAVE_LZMA)
      set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DHAVE_LZMA")
      find_library(LZMA_LIBRARY NAMES lzma)
      set(LIBS ${LIBS} ${LZMA_LIBRARY})
      set(MODULES "${MODULES} lzma")
      set(SOURCES_COMMON ${SOURCES_COMMON} compress_lzma.c)
    endif (CMAKE_HAVE_LZMA)
  else (LZMA_INCLUDE_DIR)
    message (STATUS "Looking for lzma.h - not found")
  endif(LZMA_INCLUDE_DIR)
endif(WITH_LZMA)

if(WITH_LZO)
  check_include_file("lzo/lzo1x.h" CMAKE_HAVE_LZO1X_H)
  if (CMAKE_HAVE_LZO1X_H)
    find_path(LZO_INCLUDE_DIR lzo/lzo1x.h)
    include_directories(${LZO_INCLUDE_DIR})
    check_library_exists(lzo2 lzo1x_1_compress "" CMAKE_HAVE_LIBLZO2)
    if (CMAKE_HAVE_LIBLZO2)
      set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DHAVE_LZO2")
      find_library(LZO_LIBRARY NAMES lzo2)
      set(LIBS ${LIBS} ${LZO_LIBRARY})
      set(MODULES "${MODULES} lzo")
      set(SOURCES_COMMON ${SOURCES_COMMON} compress_lzo.c minilzo/lzo.c)
    endif (CMAKE_HAVE_LIBLZO2)
  endif (CMAKE_HAVE_LZO1X_H)
endif(WITH_LZO)

message("compression modules enabled:${MODULES}")

set (CMAKE_C_FLAGS_RELEASE "-O2 -DNDEBUG")
set (CMAKE_C_FLAGS_DEBUG "-O0 -DDEBUG")
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE release)
endif(NOT CMAKE_BUILD_TYPE)

add_executable (fusecompress ${SOURCES_COMMON} ${SOURCES_FS})
add_executable (fusecompress_offline ${SOURCES_COMMON} ${SOURCES_OFFLINE})
add_executable (fsck.fusecompress ${SOURCES_COMMON} ${SOURCES_FSCK})

target_link_libraries(fusecompress ${LIBS})
target_link_libraries(fusecompress_offline ${LIBS})
target_link_libraries(fsck.fusecompress ${LIBS})
